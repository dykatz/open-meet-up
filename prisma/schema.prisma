generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

// Necessary for Next auth
model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? @db.Text
    access_token      String? @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? @db.Text
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id               String             @id @default(cuid())
    name             String?
    email            String?            @unique
    emailVerified    DateTime?
    image            String?
    accounts         Account[]
    sessions         Session[]
    memberships      Membership[]
    reservations     Reservation[]
    groupComments    GroupComment[]
    eventComments    EventComment[]
    uploadedPhotos   EventPhoto[]
    inPhotos         EventPhotoPerson[]
    sentMessages     PrivateMessage[]   @relation("MessageSender")
    receivedMessages PrivateMessage[]   @relation("MessageReceiver")
    blockedUsers     UserBlock[]        @relation("BlockingUser")
    blockedByUsers   UserBlock[]        @relation("BlockedUser")
    bannedByGroups   UserBan[]
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

model Group {
    id          String         @id @default(cuid())
    name        String
    description String
    location    String
    banner      String?
    memberships Membership[]
    comments    GroupComment[]
    bannedUsers UserBan[]
}

enum MembershipRole {
    Member
    Organizer
    Admin
}

model Membership {
    userId   String
    user     User           @relation(fields: [userId], references: [id], onDelete: Cascade)
    groupId  String
    group    Group          @relation(fields: [groupId], references: [id], onDelete: Cascade)
    joinDate DateTime       @default(now())
    role     MembershipRole @default(Member)
    nickname String?

    @@id([userId, groupId])
}

model GroupComment {
    id           String         @id @default(cuid())
    groupId      String
    group        Group          @relation(fields: [groupId], references: [id], onDelete: Cascade)
    userId       String
    user         User           @relation(fields: [userId], references: [id], onDelete: Cascade)
    date         DateTime       @default(now())
    content      String
    approved     Boolean
    replyingToId String?
    replyingTo   GroupComment?  @relation("GroupCommentReplies", fields: [replyingToId], references: [id], onDelete: SetNull)
    replies      GroupComment[] @relation("GroupCommentReplies")
}

model Event {
    id           String         @id @default(cuid())
    name         String
    description  String
    location     String
    starts       DateTime
    ends         DateTime
    reservations Reservation[]
    comments     EventComment[]
    photos       EventPhoto[]
}

model Reservation {
    userId  String
    user    User     @relation(fields: [userId], references: [id], onDelete: Cascade)
    eventId String
    event   Event    @relation(fields: [eventId], references: [id], onDelete: Cascade)
    date    DateTime @default(now())

    @@id([userId, eventId])
}

model EventComment {
    id           String         @id @default(cuid())
    eventId      String
    event        Event          @relation(fields: [eventId], references: [id], onDelete: Cascade)
    userId       String
    user         User           @relation(fields: [userId], references: [id], onDelete: Cascade)
    date         DateTime       @default(now())
    content      String
    approved     Boolean
    replyingToId String?
    replyingTo   EventComment?  @relation("EventCommentReplies", fields: [replyingToId], references: [id], onDelete: SetNull)
    replies      EventComment[] @relation("EventCommentReplies")
}

model EventPhoto {
    id       String             @id @default(cuid())
    eventId  String
    event    Event              @relation(fields: [eventId], references: [id], onDelete: Cascade)
    userId   String?
    user     User?              @relation(fields: [userId], references: [id], onDelete: SetNull)
    uploaded DateTime           @default(now())
    image    String
    alt      String?
    people   EventPhotoPerson[]
}

model EventPhotoPerson {
    photoId String
    photo   EventPhoto @relation(fields: [photoId], references: [id], onDelete: Cascade)
    userId  String
    user    User       @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@id([photoId, userId])
}

model PrivateMessage {
    id         String   @id @default(cuid())
    senderId   String
    sender     User     @relation("MessageSender", fields: [senderId], references: [id], onDelete: Cascade)
    receiverId String
    receiver   User     @relation("MessageReceiver", fields: [receiverId], references: [id], onDelete: Cascade)
    sent       DateTime @default(now())
    content    String
}

model UserBlock {
    userId        String
    user          User   @relation("BlockingUser", fields: [userId], references: [id], onDelete: Cascade)
    blockedUserId String
    blockedUser   User   @relation("BlockedUser", fields: [blockedUserId], references: [id], onDelete: Cascade)

    @@id([userId, blockedUserId])
}

model UserBan {
    groupId String
    group   Group  @relation(fields: [groupId], references: [id], onDelete: Cascade)
    userId  String
    user    User   @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@id([groupId, userId])
}
